<?php
/**
 * Fontis Australia Extension
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com and you will be sent a copy immediately.
 *
 * @category   Fontis
 * @package    Fontis_Australia
 * @author     Tom Greenaway
 * @copyright  Copyright (c) 2009 Fontis Pty. Ltd. (http://www.fontis.com.au)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

function addProductXmlCallback($args)
{
    $product = $args['product'];
    $product->setData($args['row']);
    addProductXml($product);
}

function addProductXml($product)
{
    $store = Fontis_Australia_Model_ShopBot_Cron::$store;

    Mage::log('walking');
    
    $product_node = Fontis_Australia_Model_ShopBot_Cron::$root_node
        ->addChild('product');

    $name_node = $product_node->addChild('name', $product->getName());

    $price_node = $product_node->addChild('price', $product->getPrice());

    $link_node = $product_node->addChild('link', $product->getProductUrl());

    $availability_node = $product_node->addChild('availability');
    if ($product->isSaleable()) {
        $availability_node[0] = 'yes';
    } else {
        $availability_node[0] = 'no';
    }

    Mage::log('serialized area');
    $linkedAttributes = @unserialize(Mage::getStoreConfig('fontis_feeds/shopbotfeed/m_to_xml_attributes', $store->getId()));
    if(!empty($linkedAttributes))
    {
        foreach($linkedAttributes as $la)
        {
            $magentoAtt = $la['magento'];
            $xmlAtt = $la['xmlfeed'];

            if ($magentoAtt == "FONTIS-image-link") {
                $image_node = $product_node->addChild($xmlAtt);
                $image_node[0] = (string)Mage::helper('catalog/image')->init($product, 'image');

            } elseif ($magentoAtt == "FONTIS-product-id") {
                $id_node = $product_node->addChild($xmlAtt);
                $id_node[0] = $product->getId();

            } elseif ($magentoAtt == "FONTIS-category") {
                $category_found = false;
                $category_node = $product_node->addChild('category_name');
                foreach($product->getCategoryCollection() as $c) {
                    $children = $c->getData('children_count');
                    if ($children <= 0) {
                        $category_node[0] = $c->getName();

                        $loaded_categories = Mage::getModel('catalog/category')
                            ->getCollection()
                            ->addIdFilter(array($c->getId()))
                            ->addAttributeToSelect(array('name'), 'inner')->load();

                        foreach($loaded_categories as $loaded_category) {
                            $category_node[0] = $loaded_category->getName();
                        }
                        $category_found = true;
                    }
                }
                if (!$category_found) {
                    $category_node[0] = Mage::getStoreConfig('fontis_feeds/shopbotfeed/defaultcategory');
                }

            } else {
                $value = $product->getResource()->getAttribute($magentoAtt)->getFrontend()->getValue($product);

                if ($value != "") {
                    $extra_node = $product_node->addChild($xmlAtt);
                    $extra_node[0] = $value;
                }
            }
        }
    }
    Mage::log('end of serialized area');
}

class Fontis_Australia_Model_ShopBot_Cron
{
    public static $doc;
    public static $root_node;
    public static $store;

    protected function _construct()
    {
        session_start();
    }

    protected function getPath()
    {
        $path = "";
        $config_path = Mage::getStoreConfig('fontis_feeds/shopbotfeed/output');

        if (substr($config_path, 0, 1) == "/") {
            $path = $config_path . '/';
        } else {
            $path = Mage::getBaseDir() . '/' . $config_path . '/';
        }

        return str_replace('//', '/', $path);
    }

    public static function update()
    {
        Mage::log('Fontis/Australia_Model_Shopbot_Cron: entered update function');
        if (Mage::getStoreConfig('fontis_feeds/shopbotfeed/active')) {
            $io = new Varien_Io_File();
            $io->setAllowCreateFolders(true);

            $io->open(array('path' => self::getPath()));

            foreach(Mage::app()->getStores() as $store) {
                Mage::log('for each store');
                $clean_store_name = str_replace('+', '-', strtolower(urlencode($store->getName())));
                $products_result = self::getProductsXml($store);

                // Write the entire products xml file:
                $io->write($clean_store_name . '-products.xml', $products_result['xml']);
            }

            $io->close();
        }
    }
    
    public function nonstatic()
    {
        self::update();
    }

    public function getProductsXml($store)
    {
        Mage::log('new getproductsxml');
        Fontis_Australia_Model_ShopBot_Cron::$store = $store;
        
        $result = array();

        $product = Mage::getModel('catalog/product');
        $products = $product->getCollection();
        $products->setStoreId($store);
        $products->addStoreFilter();
        $products->addAttributeToSelect('*');
        
        $attributes_select_array = array('name', 'price', 'image', 'status');
        $linkedAttributes = @unserialize(Mage::getStoreConfig('fontis_feeds/shopbotfeed/m_to_xml_attributes', $store->getId()));
        if(!empty($linkedAttributes))
        {
            foreach($linkedAttributes as $la)
            {
                if (strpos($la['magento'], 'FONTIS') === false) {
                    $attributes_select_array[] = $la['magento'];
                }
            }
        }
        Mage::log(var_export($attributes_select_array, true));
            
        $products->addAttributeToSelect($attributes_select_array, 'left');

        Mage::getSingleton('catalog/product_status')->addVisibleFilterToCollection($products);
        Mage::getSingleton('catalog/product_visibility')->addVisibleInCatalogFilterToCollection($products);

        $storeUrl = $store->getBaseUrl();
        $shopName = $store->getName();
        $date = date("d-m-Y", Mage::getModel('core/date')->timestamp(time()));
        $time = date("h:i:s", Mage::getModel('core/date')->timestamp(time()));

        self::$doc = new SimpleXMLElement('<store url="' . $storeUrl. '" date="'.$date.'" time="'.$time.'" name="' . $shopName . '"></store>');
        self::$root_node = self::$doc->addChild('products');

        Mage::log('about to walk');
        Mage::getSingleton('core/resource_iterator')->walk($products->getSelect(), array('addProductXmlCallback'), array('product' => $product));
        Mage::log('walked');

        $result['xml'] = self::$doc->asXml();
        return $result;
    }

    public function getProductsXmlOLD($store)
    {
        $result = array();

        $products = Mage::getModel('catalog/product')->getCollection()
            ->setStoreId($store->getId())
            ->addAttributeToSelect('*')->addAttributeToFilter('status', 1);

        $products->load()->getItems();

        $storeUrl = $store->getBaseUrl();
        $shopName = $store->getName();
        $date = date("d-m-Y", Mage::getModel('core/date')->timestamp(time()));
        $time = date("h:i:s", Mage::getModel('core/date')->timestamp(time()));

        $doc = new SimpleXMLElement('<store url="' . $storeUrl. '" date="'.$date.'" time="'.$time.'" name="' . $shopName . '"></store>');
        $root_node = $doc->addChild('products');

        foreach($products as $product) {
            $product_node = $root_node->addChild('product');

            $name_node = $product_node->addChild('name');
            $name_node[0] = $product->getName();

            $price_node = $product_node->addChild('price');
            $price_node[0] = $product->getPrice();

            $link_node = $product_node->addChild('link');
            $link_node[0] = $product->getProductUrl();

            $availability_node = $product_node->addChild('availability');
            if ($product->isSaleable()) {
                $availability_node[0] = 'yes';
            } else {
                $availability_node[0] = 'no';
            }

            $linkedAttributes = @unserialize(Mage::getStoreConfig('fontis_feeds/shopbotfeed/m_to_xml_attributes', $store->getId()));
            if(!empty($linkedAttributes))
            {
                foreach($linkedAttributes as $la)
                {
                    $magentoAtt = $la['magento'];
                    $xmlAtt = $la['xmlfeed'];

                    if ($magentoAtt == "FONTIS-image-link") {
                        $image_node = $product_node->addChild($xmlAtt);
                        $image_node[0] = (string)Mage::helper('catalog/image')->init($product, 'image');

                    } elseif ($magentoAtt == "FONTIS-product-id") {
                        $id_node = $product_node->addChild($xmlAtt);
                        $id_node[0] = $product->getId();

                    } elseif ($magentoAtt == "FONTIS-category") {
                        $category_found = false;
                        $category_node = $product_node->addChild($xmlAtt);

                        foreach($product->getCategoryCollection() as $c) {
                            $cat = Mage::getModel('catalog/category')->load($c->getId());

                            $children = $cat->getAllChildren(true);

                            if (count($children) <= 1) {
                                $category_node[0] = $cat->getName();
                                $category_found = true;
                            }
                        }

                        if (!$category_found) {
                            $category_node[0] = Mage::getStoreConfig('fontis_feeds/shopbotfeed/defaultcategory');
                        }

                    } else {
                        $value = $product->getResource()->getAttribute($magentoAtt)->getFrontend()->getValue($product);

                        if ($value != "") {
                            $extra_node = $product_node->addChild($xmlAtt);
                            $extra_node[0] = $value;
                        }
                    }
                }
            }
        }

        $result['xml'] = $doc->asXml();
        return $result;
    }
}
